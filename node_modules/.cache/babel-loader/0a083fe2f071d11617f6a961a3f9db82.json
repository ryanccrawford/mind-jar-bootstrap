{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RyanC\\\\Desktop\\\\code\\\\mind-jar-bootstrap\\\\src\\\\components\\\\Board\\\\index.js\";\nimport React, { Component } from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.shuffleImages = () => {\n      this.setState({\n        cards: []\n      });\n      let array = this.state.images;\n\n      for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        var _ref = [array[j], array[i]];\n        array[i] = _ref[0];\n        array[j] = _ref[1];\n      }\n\n      this.setState({\n        cards: array\n      });\n    };\n\n    this.handleImgClick = event => {\n      let id = event.target.getAttribute(\"data-id\");\n\n      if (id) {\n        this.addClickedImg(id);\n      }\n    };\n\n    this.checkIfAlreadyClicked = id => {\n      let currentPicked = this.state.cardsClick;\n\n      if (typeof currentPicked === 'undefined' || currentPicked.length < 1) {\n        return false;\n      } else {\n        let match = currentPicked.find((value, index) => id === value ? true : false);\n\n        if (typeof match === 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.state.images = [\"13\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"15\", \"16\"];\n    this.state.cardsClick = [];\n    this.state.cards = [];\n  }\n\n  componentDidMount() {\n    this.shuffleImages();\n  }\n\n  addClickedImg(imageNum) {\n    if (this.checkIfAlreadyClicked(imageNum)) {\n      this.props.incrementLoses();\n      this.props.setScoreZero();\n      this.setState({\n        cards: []\n      });\n      this.setState({\n        cardsClick: []\n      });\n    } else {\n      this.setState({\n        cardsClick: [...this.state.cardsClick, imageNum]\n      });\n      this.props.incrementScore();\n\n      if (this.state.cardsClick.length === this.state.images.length) {\n        this.props.incrementWins();\n      }\n    }\n\n    this.shuffleImages();\n  }\n\n  render() {\n    return React.createElement(Card, {\n      cards: this.state.cards,\n      handleImgClick: this.handleImgClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["C:\\Users\\RyanC\\Desktop\\code\\mind-jar-bootstrap\\src\\components\\Board\\index.js"],"names":["React","Component","Card","Board","constructor","props","state","shuffleImages","setState","cards","array","images","i","length","j","Math","floor","random","handleImgClick","event","id","target","getAttribute","addClickedImg","checkIfAlreadyClicked","currentPicked","cardsClick","match","find","value","index","componentDidMount","imageNum","incrementLoses","setScoreZero","incrementScore","incrementWins","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"../Card\";\r\nimport \"./style.css\";\r\n\r\nclass Board extends Component {\r\n    \r\n    state = {\r\n\r\n\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state.images = [\"13\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"15\", \"16\"] ;\r\n        this.state.cardsClick = [] ;\r\n        this.state.cards = [];\r\n        \r\n    }\r\n    \r\n   \r\n    componentDidMount() {\r\n        this.shuffleImages()\r\n    }\r\n\r\n    shuffleImages = () => {\r\n        this.setState({ cards: [] })\r\n        let array = this.state.images\r\n       for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        this.setState({ cards: array })\r\n    }\r\n\r\n    handleImgClick = event => { \r\n        let id = event.target.getAttribute(\"data-id\")\r\n        if (id) {\r\n            this.addClickedImg(id) \r\n        }\r\n     \r\n    };\r\n    addClickedImg(imageNum) {\r\n        if (this.checkIfAlreadyClicked(imageNum)) {\r\n            this.props.incrementLoses()\r\n            this.props.setScoreZero();\r\n            this.setState({ cards: [] })\r\n            this.setState({ cardsClick: [] })     \r\n        } else {\r\n            this.setState({ cardsClick: [...this.state.cardsClick, imageNum] })\r\n                this.props.incrementScore()\r\n            if (this.state.cardsClick.length === this.state.images.length) {\r\n                this.props.incrementWins()    \r\n            }\r\n            \r\n        }\r\n        this.shuffleImages()\r\n    }\r\n    checkIfAlreadyClicked = (id) => {\r\n        let currentPicked = this.state.cardsClick\r\n        if (typeof (currentPicked) === 'undefined' || currentPicked.length < 1) {\r\n            return false\r\n        } else {\r\n            let match = currentPicked.find((value, index) => (id === value ? true : false))\r\n            if (typeof (match) === 'undefined') {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n   \r\n\r\n    render() {\r\n        return (\r\n            <Card cards={this.state.cards} handleImgClick={this.handleImgClick}>\r\n            </Card >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}